/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. mnc.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.8";

  static = false;
}

PARSER_BEGIN(mnc)
package parser;
import java.io.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import utils.*;
import java.io.PrintStream;
import java.util.ArrayList;

public class mnc/*@bgen(jjtree)*/implements mncTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTmncState jjtree = new JJTmncState();

/*@egen*/
  public static QTList qtTable = new QTList();

  public static String cifaFile = "E://Java-workspace//PPRP//src//testFile//lexical.txt";

  public static String yufaFile = "E://Java-workspace//PPRP//src//testFile//yufa.txt";

  public static String yuyiFile = "E://Java-workspace//PPRP//src//testFile//yuyi.txt";

  public static String errorFile = "E://Java-workspace//PPRP//src//testFile//error.txt";

  public static boolean haveError = false;

  //for\u9519\u8bef\u68c0\u67e5
  public static String S = "";

  public static ArrayList < MyNode > mylist = new ArrayList < MyNode > ();

  public static MyNodeList mynodelist = new MyNodeList(mylist);

  public void printQTList()
  {
    qtTable.printQTTable();
  }

  public static void main(String args [])
  {
    try
    {
      File file = new File("E://Java-workspace//PPRP//2.txt");
      FileInputStream fis = new FileInputStream(file);
      mnc mm = new mnc(fis);
      SimpleNode n = mm.Start();
      n.dump("");
      mm.printQTList();
    }
    catch (Exception e)
    {
      System.out.println("error\n" + e.getMessage());
      e.printStackTrace();
    }
    //    try
    //    {
    //      File file = new File("E://Java-workspace//PPRP//src//testFile//1.txt");
    //      FileInputStream fis = new FileInputStream(file);
    //      mnc mm = new mnc(fis);
    //      //yuyi(mm);
    //      //cifa("E://Java-workspace//PPRP//2.txt");
    //      run("E://Java-workspace//PPRP//2.txt");
    //    }
    //    catch (Exception e)
    //    {
    //      e.printStackTrace();
    //    }
  }

  public static void run(String FilePath) throws FileNotFoundException
  {
    try
    {
      //\u8bcd\u6cd5\u90e8\u5206
      File file = new File(FilePath);
      SimpleCharStream scs = new SimpleCharStream(new FileInputStream(file));
      //\u8f93\u51fa\u6d41
      FileOutputStream fos1 = new FileOutputStream(cifaFile); //\u8bcd\u6cd5
      FileOutputStream fos2 = new FileOutputStream(yufaFile); //\u8bed\u6cd5
      FileOutputStream fos3 = new FileOutputStream(yuyiFile); //\u8bed\u4e49
      PrintStream LexicalStream1 = new PrintStream(fos1);
      PrintStream LexicalStream2 = new PrintStream(fos2);
      PrintStream LexicalStream3 = new PrintStream(fos3);
      //\u8bcd\u6cd5\u90e8\u5206\uff0c\u5f97\u5230lexicalStr
      mncTokenManager mtm = new mncTokenManager(scs);
      Token a = mtm.getNextToken();
      String lexicalStr = "";
      while (a.kind != EOF)
      {
        lexicalStr += a.kind;
        lexicalStr += "\t";
        lexicalStr += a.image;
        lexicalStr += "\n";
        System.out.println(a.kind + "\t" + a.image);
        a = mtm.getNextToken();
      }
      //\u5c06\u6d41\u4f20\u9001\u5230\u6587\u4ef6
      LexicalStream1.print(lexicalStr);
      //\u5173\u95ed\u6d41
      //fos1.close();
      //LexicalStream1.close();
      //\u8bed\u6cd5\u5206\u6790\uff0c\u5f97\u5230syntaxStr
      mnc tmp = new mnc(new FileInputStream(new File(FilePath)));
      SimpleNode n = tmp.Start();
      System.setOut(LexicalStream2);
      n.dump("");
      //\u5173\u95ed\u6240\u6709\u7684\u6d41
      //fos2.close();
      //LexicalStream2.close();
      //\u8bed\u4e49\u5206\u6790
      System.setOut(LexicalStream3);
      tmp.printQTList();
      fos1.close();
      LexicalStream1.close();
      fos2.close();
      LexicalStream2.close();
      fos3.close();
      LexicalStream3.close();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public static void yuyi(mnc mm) throws FileNotFoundException
  {
    try
    {
      SimpleNode n = mm.Start();
      FileOutputStream fos = new FileOutputStream(yuyiFile);
      PrintStream ps = new PrintStream(fos);
      System.setOut(ps);
      dumps("", n, ps);
      fos.close();
      ps.close();
    }
    catch (Exception e)
    {
      System.out.println("error\n" + e.getMessage());
      e.printStackTrace();
    }
  }

  public static void dumps(String prefix, SimpleNode sn, PrintStream ps)
  {
    ps.println(prefix);
    if (sn.children != null)
    {
      for (int i = 0; i < sn.children.length; ++i)
      {
        SimpleNode n = (SimpleNode) sn.children [i];
        if (n != null)
        {
          n.dump(prefix + "  ");
        }
      }
    }
  }

  public static void cifa(String FilePath) throws FileNotFoundException
  {
    try
    {
      File file = new File(FilePath);
      SimpleCharStream scs = new SimpleCharStream(new FileInputStream(file));
      FileOutputStream fos = new FileOutputStream(cifaFile);
      PrintStream LexicalStream = new PrintStream(fos);
      mncTokenManager mtm = new mncTokenManager(scs);
      Token a = mtm.getNextToken();
      String lexicalStr = "";
      while (a.kind != EOF)
      {
        lexicalStr += a.kind;
        lexicalStr += "\t";
        lexicalStr += a.image;
        lexicalStr += "\n";
        System.out.println(a.kind + "\t" + a.image);
        a = mtm.getNextToken();
      }
      LexicalStream.print(lexicalStr);
      fos.close();
      LexicalStream.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(mnc)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* KEYWORDS */		
{		
  < IF : "if" >		
| < ELSE : "else" >		
| < INT : "int" >
| < CHAR : "char" >
| < DOUBLE : "double" >
| < FLOAT : "float" >
| < VOID : "void" >		
| < RETURN : "return" >		
| < WHILE : "while" >
| < MAIN : "main" >
| < BREAK : "break" >
| < DEFAULT1 : "default" >
| < SWITCH : "switch" >
| < DO : "do" >
| < BOOL : "bool" >
| < FOR : "for" >
| < CASE : "case" >
}	

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* FLOAT */
{
  < FLOAT_NUM :
    [ "1"-"9" ] ([ "0"-"9" ])* "." ([ "0"-"9" ])*
  | "0." ([ "0"-"9" ])* 
  >
}

TOKEN : /*CONSTANT*/		
{		
  < INTCONSTRANT :		
    (< DIGIT >)+		
    (		
      "l"
    | "L"		
    )? >		
}

TOKEN : /* SEPARATER */		
{		
  < SEMI : ";" >
| < COLON : ":" >		
| < LB : "(" >		
| < RB : ")" >		
| < COMMA : "," >		
| < LCB : "{" >		
| < RCB : "}" >		
| < LSB : "[" >		
| < RSB : "]" >		
}

TOKEN : /* OPERATORs */		
{		
  < ADD : "+" >		
| < MINUS : "-" >		
| < MULTIPLY : "*" >		
| < DIVIDE : "/" >		
| < GREATER : ">" >		
| < SMALLER : "<" >		
| < EQUAL : "=" >
| < LE : "<=" >
| < GE : ">=" >
| < EE : "==" >
| < NE : "!=" >
| < QUYU : "%" >
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
| < AUTOADD : "++" >
| < AUTOSUBTRACT : "--" >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program() < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token type() :
{/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  t = < INT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < FLOAT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < DOUBLE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < CHAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < VOID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Program() :
{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  type() < MAIN > 
  < LB >
  (
    type() Identifier()
  )*
  < RB > 
  StateBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StateBlock() :
{/*@bgen(jjtree) StateBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) StateBlock */
  try {
/*@egen*/
  State()
| 
  < LCB >
  (
    StateBlock()
  )*
  < RCB >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void State() :
{/*@bgen(jjtree) State */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) State */
  try {
/*@egen*/
  SeqState()
| BranchState()
| LoopState()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SeqState() :
{/*@bgen(jjtree) SeqState */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SeqState */
  try {
/*@egen*/
  (
    DecState()
  | AssState()
  | BreakState()
  )
  < SEMI >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DecState() :
{/*@bgen(jjtree) DecState */
  SimpleNode jjtn000 = new SimpleNode(JJTDECSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  Token node = null;
  //\u68c0\u67e5\u662f\u5426\u91cd\u590d\u5b9a\u4e49
  String name = null;
  //\u4e34\u65f6\u53d8\u91cf
  String tps = null;
  MyNode tempNode = null;
}
{/*@bgen(jjtree) DecState */
  try {
/*@egen*/
  t = type() node = < IDENTIFIER >
  {
    name = node.image;
    if (mynodelist.getSize() != 0 && mynodelist.isCunZai(name))
    {
      tps = "\u53d8\u91cf" + name + "\u4e4b\u524d\u5df2\u7ecf\u58f0\u660e\u8fc7" + "\n";
      S += tps;
      tps = null;
      haveError = true;
    }
    else
    {
      tempNode = new MyNode(name, t.image);
      mynodelist.addNode(tempNode);
    }
  }
  (
  < COMMA > < IDENTIFIER >
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssState() :
{/*@bgen(jjtree) AssState */
  SimpleNode jjtn000 = new SimpleNode(JJTASSSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  Token op;
  String str;
  //\u4e34\u65f6\u53d8\u91cf
  String tps;
}
{/*@bgen(jjtree) AssState */
  try {
/*@egen*/
  id = < IDENTIFIER > 
  op = < EQUAL > 
  str = Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo info = new QTInfo(op.image, str, "_", id.image);
    qtTable.addQTInfo(info);
    //\u9519\u8bef\u5206\u6790\u90e8\u5206
    if (mynodelist.getSize() != 0)
    {
      if (!mynodelist.isCunZai(id.image))
      {
        tps = "\u53d8\u91cf" + id.image + "\u4f7f\u7528\u65f6\u672a\u5b9a\u4e49" + "\n";
        S += tps;
        tps = null;
        haveError = true;
      }
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakState() :
{/*@bgen(jjtree) BreakState */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) BreakState */
  try {
/*@egen*/
  t = < BREAK >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BranchState() :
{/*@bgen(jjtree) BranchState */
  SimpleNode jjtn000 = new SimpleNode(JJTBRANCHSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) BranchState */
  try {
/*@egen*/
  IfState()
| SwitchState()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//switch-case\u8bed\u53e5
void SwitchState() :
{/*@bgen(jjtree) SwitchState */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad;
  int quad1;
  String res = null; //\u5b58\u653eE\u7684\u7ed3\u679c
  Token t;
}
{/*@bgen(jjtree) SwitchState */
  try {
/*@egen*/
  < SWITCH > "(" 
  res = AdditiveExpression() ")" 
  "{"
  (
    < CASE > 
    t = < INTEGER_LITERAL > ":"
    {
      //\u5f97\u5230\u4e0b\u4e00\u4e2a\u56db\u5143\u5f0f\u7684\u5e8f\u53f7\uff0c\u8fdb\u884c\u56de\u586b\u64cd\u4f5c
      quad = QTInfo.size + 1;
    }
    {
      /*Goto L\u8bed\u53e5\uff0c\u91c7\u7528\u5b9a\u4e49\u6027\u51fa\u73b0\uff0c\u5373\u4ee5S\u4ea7\u751f\u7684\u7b2c\u4e00\u4e2a\u56db\u5143\u5f0f\u7684\u5e8f\u53f7\u4f5c\u4e3a
	  \u6807\u53f7L\u7684\u5730\u5740*/
      quad++;
      //\u5982\u679cres\u7b49\u4e8et.image\uff0c\u5c31\u8df3\u8f6c\u5230quad\u56db\u5143\u5f0f
      QTInfo info = new QTInfo("case", res, t.image, quad);
      qtTable.addQTInfo(info);
    }
    State() < BREAK > ";"
  )+
  < DEFAULT1 > ":"
  {
    quad1 = QTInfo.size + 1;
  }
  {
    //\u5982\u679c\u524d\u9762\u90fd\u65e0\u6cd5\u5339\u914d\uff0c\u5219\u8fdb\u884cdefault
    quad1++;
    QTInfo info = new QTInfo("case", res, "default", quad1);
    qtTable.addQTInfo(info);
  }
  State() 
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfState() :
{/*@bgen(jjtree) IfState */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int mark;
  int fmark;
}
{/*@bgen(jjtree) IfState */
  try {
/*@egen*/
  < IF > 
  < LB > 
  chain = Condition()
  {
    chain.backpatchTrueChain(QTInfo.size + 1);
  }
  < RB > 
  StateBlock()
  {
    fmark = QTInfo.size + 1;
  }
  (
    LOOKAHEAD(1)
    < ELSE >
    {
      //\u65e0\u6761\u4ef6\u8df3\u8f6c
      QTInfo info = new QTInfo("J", "_", "_", 0);
      qtTable.addQTInfo(info);
      chain.backpatchFalseChain(QTInfo.size + 1);
      fmark++;
    }
    StateBlock()
    {
      //\u4e5f\u7b97\u662f\u56de\u586b\u5427
      info.setResult(QTInfo.size + 1);
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    chain.backpatchFalseChain(fmark);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue Condition() :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int mark;
  String first = null;
  String middle = null;
  String ropImage = null;
  ConditionValue chain = new ConditionValue();
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  first = Expression()
  (
    ropImage = Relation() 
    middle = Expression()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    mark = QTInfo.size + 1;
    if (ropImage == null)
    {
      QTInfo info = new QTInfo("Jnz", first, "_", mark + 2);
      qtTable.addQTInfo(info);
      chain.mergeTrue(info);
    }
    else
    {
      QTInfo info = new QTInfo("J" + ropImage, first, middle, mark + 2);
      qtTable.addQTInfo(info);
      chain.mergeTrue(info);
    }
    //setResult
    QTInfo info = new QTInfo("J", "_", "_", 0);
    qtTable.addQTInfo(info);
    chain.mergeFalse(info);
    return chain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Relation() :
{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Relation */
  try {
/*@egen*/
  t = < GREATER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < SMALLER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < EQUAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < LE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < GE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < NE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String LogicalOperator() :
{/*@bgen(jjtree) LogicalOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) LogicalOperator */
  try {
/*@egen*/
  t = < AND >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < OR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = < NOT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LoopState() :
{/*@bgen(jjtree) LoopState */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) LoopState */
  try {
/*@egen*/
  WhileState()
| DoWhileState()
| ForState()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileState() :
{/*@bgen(jjtree) WhileState */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int quad;
}
{/*@bgen(jjtree) WhileState */
  try {
/*@egen*/
  < WHILE >
  {
    quad = QTInfo.size + 1;
  }
  < LB > 
  chain = Condition() 
  < RB >
  {
    chain.backpatchTrueChain(QTInfo.size + 1);
  }
  StateBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtTable.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoWhileState() :
{/*@bgen(jjtree) DoWhileState */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int fmark;
  int tmark;
}
{/*@bgen(jjtree) DoWhileState */
  try {
/*@egen*/
  < DO >
  {
    tmark = QTInfo.size + 1;
  }
  StateBlock() 
  < WHILE > 
  < LB >
  {
  }
  chain = Condition()
  {
    //qtTable.addQTInfo(new QTInfo("J","_","_",tmark));
    chain.backpatchTrueChain(tmark);
    chain.backpatchFalseChain(QTInfo.size + 1);
  }
  < RB > 
  < SEMI >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForState() :
{/*@bgen(jjtree) ForState */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int e2Begin = 0;
  int e2End = 0;
  int e3End = 0;
  int e3Begin = 0;
  int sBegin = 0, sEnd = 0;
}
{/*@bgen(jjtree) ForState */
  try {
/*@egen*/
  < FOR > 
  < LB >
  (
    AssState()
    (
      "," AssState()
    )*
  )?
  ";"
  //\u7b2c\u4e8c\u90e8\u5206\u662f\uff1a \u6761\u4ef6 E2
  (
    {
      e2Begin = QTInfo.size + 1;
    }
    chain = Condition()
    {
      e2End = QTInfo.size + 1;
    }
  )?
  ";"
  //\u7b2c\u4e09\u90e8\u5206\uff1aE3
  (
    {
      e3Begin = QTInfo.size + 1;
    }
    AutoAS()
    {
      //\u65e0\u6761\u4ef6\u8df3\u8f6c
      e3End = QTInfo.size + 1;
      qtTable.addQTInfo(new QTInfo("J", "_", "_", e2Begin));
    }
  )?
  //S\u90e8\u5206
  < RB >
  {
    sBegin = QTInfo.size + 1;
  }
  StateBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    //\u6ca1\u95ee\u9898\uff0c\u76f4\u63a5\u8df3\u51fa\u5faa\u73af
    qtTable.addQTInfo(new QTInfo("J", "_", "_", e2End));
    sEnd = QTInfo.size + 1;
    //False chain
    chain.backpatchFalseChain(sEnd);
    //True chain
    chain.backpatchTrueChain(sBegin);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u81ea\u589e\u81ea\u51cf
void AutoAS() :
{/*@bgen(jjtree) AutoAS */
  SimpleNode jjtn000 = new SimpleNode(JJTAUTOAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  Token op;
  String newTemp;
}
{/*@bgen(jjtree) AutoAS */
  try {
/*@egen*/
  id = < IDENTIFIER >
  (
    op = < AUTOADD >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      //\u751f\u6210\u56db\u5143\u5f0f\uff0c\u5165\u94fe\u8868,\u81ea\u589e
      //newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo("+", id.image, "1", id.image);
      qtTable.addQTInfo(qt);
    }
  | op = < AUTOSUBTRACT >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      //\u751f\u6210\u56db\u5143\u5f0f\uff0c\u5165\u94fe\u8868\uff0c\u81ea\u51cf
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo info = new QTInfo("-", id.image, "1", newTemp);
      QTInfo info1 = new QTInfo("=", newTemp, "_", id.image);
      qtTable.addQTInfo(info);
      qtTable.addQTInfo(info1);
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u8868\u8fbe\u5f0f
String Expression() :		
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first = null;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/		
  first = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return first;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AdditiveExpression() :		
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first = null;
  String middle = null;
  String newTemp = null;
  Token op = null;
}		
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/		
  first = MultiplicativeExpression()
  {
    newTemp = first;
  }		
  (		
    (		
      op = < ADD >		
    | op = < MINUS >
    )		
    middle = MultiplicativeExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;
    }	
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/	
}	

String MultiplicativeExpression() :		
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first = null, middle = null, newTemp = null;
  Token op = null;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/		
  first = UnaryExpression()
  {
    newTemp = first;
  }	
  (		
    (		
      op = < MULTIPLY >		
    | op = < DIVIDE >		
    | op = < QUYU >	
    )		
    middle = UnaryExpression() //middle\u662f\u8fd4\u56de\u7684\u5b57\u7b26\u4e32
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = null;
  Token t = null;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  < LB > str = Expression() < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }
| t = Identifier()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = Integer()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }
| t = Float()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Float() :
{/*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Float */
  try {
/*@egen*/
  t = < FLOAT_NUM >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Integer() :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
