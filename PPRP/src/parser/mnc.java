/* Generated By:JJTree&JavaCC: Do not edit this line. mnc.java */
package parser;
import java.io.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import utils.*;
import java.io.PrintStream;
import java.util.ArrayList;

public class mnc/*@bgen(jjtree)*/implements mncTreeConstants, mncConstants {/*@bgen(jjtree)*/
  protected JJTmncState jjtree = new JJTmncState();public static QTList qtTable = new QTList();

  public static String cifaFile = "E://Java-workspace//PPRP//src//testFile//lexical.txt";

  public static String yufaFile = "E://Java-workspace//PPRP//src//testFile//yufa.txt";

  public static String yuyiFile = "E://Java-workspace//PPRP//src//testFile//yuyi.txt";

  public static String errorFile = "E://Java-workspace//PPRP//src//testFile//error.txt";

  public static boolean haveError = false;

  //for错误检查
  public static String S = "";

  public static ArrayList < MyNode > mylist = new ArrayList < MyNode > ();

  public static MyNodeList mynodelist = new MyNodeList(mylist);

  public void printQTList()
  {
    qtTable.printQTTable();
  }

  public static void main(String args [])
  {
    try
    {
      File file = new File("E://Java-workspace//PPRP//2.txt");
      FileInputStream fis = new FileInputStream(file);
      mnc mm = new mnc(fis);
      SimpleNode n = mm.Start();
      n.dump("");
      mm.printQTList();
    }
    catch (Exception e)
    {
      System.out.println("error\u005cn" + e.getMessage());
      e.printStackTrace();
    }
    //    try
    //    {
    //      File file = new File("E://Java-workspace//PPRP//src//testFile//1.txt");
    //      FileInputStream fis = new FileInputStream(file);
    //      mnc mm = new mnc(fis);
    //      //yuyi(mm);
    //      //cifa("E://Java-workspace//PPRP//2.txt");
    //      run("E://Java-workspace//PPRP//2.txt");
    //    }
    //    catch (Exception e)
    //    {
    //      e.printStackTrace();
    //    }
  }

  public static void run(String FilePath) throws FileNotFoundException
  {
    try
    {
      //词法部分
      File file = new File(FilePath);
      SimpleCharStream scs = new SimpleCharStream(new FileInputStream(file));
      //输出流
      FileOutputStream fos1 = new FileOutputStream(cifaFile); //词法
      FileOutputStream fos2 = new FileOutputStream(yufaFile); //语法
      FileOutputStream fos3 = new FileOutputStream(yuyiFile); //语义
      PrintStream LexicalStream1 = new PrintStream(fos1);
      PrintStream LexicalStream2 = new PrintStream(fos2);
      PrintStream LexicalStream3 = new PrintStream(fos3);
      //词法部分，得到lexicalStr
      mncTokenManager mtm = new mncTokenManager(scs);
      Token a = mtm.getNextToken();
      String lexicalStr = "";
      while (a.kind != EOF)
      {
        lexicalStr += a.kind;
        lexicalStr += "\u005ct";
        lexicalStr += a.image;
        lexicalStr += "\u005cn";
        System.out.println(a.kind + "\u005ct" + a.image);
        a = mtm.getNextToken();
      }
      //将流传送到文件
      LexicalStream1.print(lexicalStr);
      //关闭流
      //fos1.close();
      //LexicalStream1.close();
      //语法分析，得到syntaxStr
      mnc tmp = new mnc(new FileInputStream(new File(FilePath)));
      SimpleNode n = tmp.Start();
      System.setOut(LexicalStream2);
      n.dump("");
      //关闭所有的流
      //fos2.close();
      //LexicalStream2.close();
      //语义分析
      System.setOut(LexicalStream3);
      tmp.printQTList();
      fos1.close();
      LexicalStream1.close();
      fos2.close();
      LexicalStream2.close();
      fos3.close();
      LexicalStream3.close();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }

  public static void yuyi(mnc mm) throws FileNotFoundException
  {
    try
    {
      SimpleNode n = mm.Start();
      FileOutputStream fos = new FileOutputStream(yuyiFile);
      PrintStream ps = new PrintStream(fos);
      System.setOut(ps);
      dumps("", n, ps);
      fos.close();
      ps.close();
    }
    catch (Exception e)
    {
      System.out.println("error\u005cn" + e.getMessage());
      e.printStackTrace();
    }
  }

  public static void dumps(String prefix, SimpleNode sn, PrintStream ps)
  {
    ps.println(prefix);
    if (sn.children != null)
    {
      for (int i = 0; i < sn.children.length; ++i)
      {
        SimpleNode n = (SimpleNode) sn.children [i];
        if (n != null)
        {
          n.dump(prefix + "  ");
        }
      }
    }
  }

  public static void cifa(String FilePath) throws FileNotFoundException
  {
    try
    {
      File file = new File(FilePath);
      SimpleCharStream scs = new SimpleCharStream(new FileInputStream(file));
      FileOutputStream fos = new FileOutputStream(cifaFile);
      PrintStream LexicalStream = new PrintStream(fos);
      mncTokenManager mtm = new mncTokenManager(scs);
      Token a = mtm.getNextToken();
      String lexicalStr = "";
      while (a.kind != EOF)
      {
        lexicalStr += a.kind;
        lexicalStr += "\u005ct";
        lexicalStr += a.image;
        lexicalStr += "\u005cn";
        System.out.println(a.kind + "\u005ct" + a.image);
        a = mtm.getNextToken();
      }
      LexicalStream.print(lexicalStr);
      fos.close();
      LexicalStream.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token type() throws ParseException {
 /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      jj_consume_token(MAIN);
      jj_consume_token(LB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case VOID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        type();
        Identifier();
      }
      jj_consume_token(RB);
      StateBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StateBlock() throws ParseException {
 /*@bgen(jjtree) StateBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INT:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case VOID:
      case WHILE:
      case BREAK:
      case SWITCH:
      case DO:
      case FOR:
      case IDENTIFIER:
        State();
        break;
      case LCB:
        jj_consume_token(LCB);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case INT:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case VOID:
          case WHILE:
          case BREAK:
          case SWITCH:
          case DO:
          case FOR:
          case IDENTIFIER:
          case LCB:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          StateBlock();
        }
        jj_consume_token(RCB);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void State() throws ParseException {
 /*@bgen(jjtree) State */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case VOID:
      case BREAK:
      case IDENTIFIER:
        SeqState();
        break;
      case IF:
      case SWITCH:
        BranchState();
        break;
      case WHILE:
      case DO:
      case FOR:
        LoopState();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SeqState() throws ParseException {
 /*@bgen(jjtree) SeqState */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case VOID:
        DecState();
        break;
      case IDENTIFIER:
        AssState();
        break;
      case BREAK:
        BreakState();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DecState() throws ParseException {
 /*@bgen(jjtree) DecState */
  SimpleNode jjtn000 = new SimpleNode(JJTDECSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  Token node = null;
  //检查是否重复定义
  String name = null;
  //临时变量
  String tps = null;
  MyNode tempNode = null;
    try {
      t = type();
      node = jj_consume_token(IDENTIFIER);
    name = node.image;
    if (mynodelist.getSize() != 0 && mynodelist.isCunZai(name))
    {
      tps = "\u53d8\u91cf" + name + "\u4e4b\u524d\u5df2\u7ecf\u58f0\u660e\u8fc7" + "\u005cn";
      S += tps;
      tps = null;
      haveError = true;
    }
    else
    {
      tempNode = new MyNode(name, t.image);
      mynodelist.addNode(tempNode);
    }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssState() throws ParseException {
 /*@bgen(jjtree) AssState */
  SimpleNode jjtn000 = new SimpleNode(JJTASSSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id;
  Token op;
  String str;
  //临时变量
  String tps;
    try {
      id = jj_consume_token(IDENTIFIER);
      op = jj_consume_token(EQUAL);
      str = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo info = new QTInfo(op.image, str, "_", id.image);
    qtTable.addQTInfo(info);
    //错误分析部分
    if (mynodelist.getSize() != 0)
    {
      if (!mynodelist.isCunZai(id.image))
      {
        tps = "\u53d8\u91cf" + id.image + "\u4f7f\u7528\u65f6\u672a\u5b9a\u4e49" + "\u005cn";
        S += tps;
        tps = null;
        haveError = true;
      }
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakState() throws ParseException {
 /*@bgen(jjtree) BreakState */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(BREAK);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BranchState() throws ParseException {
 /*@bgen(jjtree) BranchState */
  SimpleNode jjtn000 = new SimpleNode(JJTBRANCHSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        IfState();
        break;
      case SWITCH:
        SwitchState();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//switch-case语句
  final public void SwitchState() throws ParseException {
 /*@bgen(jjtree) SwitchState */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad;
  int quad1;
  String res = null; //存放E的结果
  Token t;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LB);
      res = AdditiveExpression();
      jj_consume_token(RB);
      jj_consume_token(LCB);
      label_4:
      while (true) {
        jj_consume_token(CASE);
        t = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(COLON);
      //得到下一个四元式的序号，进行回填操作
      quad = QTInfo.size + 1;
      /*Goto L语句，采用定义性出现，即以S产生的第一个四元式的序号作为
	  标号L的地址*/
      quad++;
      //如果res等于t.image，就跳转到quad四元式
      QTInfo info = new QTInfo("case", res, t.image, quad);
      qtTable.addQTInfo(info);
        State();
        jj_consume_token(BREAK);
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(DEFAULT1);
      jj_consume_token(COLON);
    quad1 = QTInfo.size + 1;
    //如果前面都无法匹配，则进行default
    quad1++;
    QTInfo info = new QTInfo("case", res, "default", quad1);
    qtTable.addQTInfo(info);
      State();
      jj_consume_token(RCB);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfState() throws ParseException {
 /*@bgen(jjtree) IfState */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int mark;
  int fmark;
    try {
      jj_consume_token(IF);
      jj_consume_token(LB);
      chain = Condition();
    chain.backpatchTrueChain(QTInfo.size + 1);
      jj_consume_token(RB);
      StateBlock();
    fmark = QTInfo.size + 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
      //无条件跳转
      QTInfo info = new QTInfo("J", "_", "_", 0);
      qtTable.addQTInfo(info);
      chain.backpatchFalseChain(QTInfo.size + 1);
      fmark++;
        StateBlock();
      //也算是回填吧
      info.setResult(QTInfo.size + 1);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    chain.backpatchFalseChain(fmark);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ConditionValue Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int mark;
  String first = null;
  String middle = null;
  String ropImage = null;
  ConditionValue chain = new ConditionValue();
    try {
      first = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case SMALLER:
      case EQUAL:
      case LE:
      case GE:
      case NE:
        ropImage = Relation();
        middle = Expression();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    mark = QTInfo.size + 1;
    if (ropImage == null)
    {
      QTInfo info = new QTInfo("Jnz", first, "_", mark + 2);
      qtTable.addQTInfo(info);
      chain.mergeTrue(info);
    }
    else
    {
      QTInfo info = new QTInfo("J" + ropImage, first, middle, mark + 2);
      qtTable.addQTInfo(info);
      chain.mergeTrue(info);
    }
    //setResult
    QTInfo info = new QTInfo("J", "_", "_", 0);
    qtTable.addQTInfo(info);
    chain.mergeFalse(info);
    {if (true) return chain;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Relation() throws ParseException {
 /*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
        t = jj_consume_token(GREATER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case SMALLER:
        t = jj_consume_token(SMALLER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case LE:
        t = jj_consume_token(LE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case GE:
        t = jj_consume_token(GE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case NE:
        t = jj_consume_token(NE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String LogicalOperator() throws ParseException {
 /*@bgen(jjtree) LogicalOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case OR:
        t = jj_consume_token(OR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case NOT:
        t = jj_consume_token(NOT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void LoopState() throws ParseException {
 /*@bgen(jjtree) LoopState */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        WhileState();
        break;
      case DO:
        DoWhileState();
        break;
      case FOR:
        ForState();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileState() throws ParseException {
 /*@bgen(jjtree) WhileState */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int quad;
    try {
      jj_consume_token(WHILE);
    quad = QTInfo.size + 1;
      jj_consume_token(LB);
      chain = Condition();
      jj_consume_token(RB);
    chain.backpatchTrueChain(QTInfo.size + 1);
      StateBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    qtTable.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoWhileState() throws ParseException {
 /*@bgen(jjtree) DoWhileState */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int fmark;
  int tmark;
    try {
      jj_consume_token(DO);
    tmark = QTInfo.size + 1;
      StateBlock();
      jj_consume_token(WHILE);
      jj_consume_token(LB);

      chain = Condition();
    //qtTable.addQTInfo(new QTInfo("J","_","_",tmark));
    chain.backpatchTrueChain(tmark);
    chain.backpatchFalseChain(QTInfo.size + 1);
      jj_consume_token(RB);
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForState() throws ParseException {
 /*@bgen(jjtree) ForState */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue chain = null;
  int e2Begin = 0;
  int e2End = 0;
  int e3End = 0;
  int e3Begin = 0;
  int sBegin = 0, sEnd = 0;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        AssState();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          AssState();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case FLOAT_NUM:
      case LB:
      e2Begin = QTInfo.size + 1;
        chain = Condition();
      e2End = QTInfo.size + 1;
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      e3Begin = QTInfo.size + 1;
        AutoAS();
      //无条件跳转
      e3End = QTInfo.size + 1;
      qtTable.addQTInfo(new QTInfo("J", "_", "_", e2Begin));
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RB);
    sBegin = QTInfo.size + 1;
      StateBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    //没问题，直接跳出循环
    qtTable.addQTInfo(new QTInfo("J", "_", "_", e2End));
    sEnd = QTInfo.size + 1;
    //False chain
    chain.backpatchFalseChain(sEnd);
    //True chain
    chain.backpatchTrueChain(sBegin);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//自增自减
  final public void AutoAS() throws ParseException {
 /*@bgen(jjtree) AutoAS */
  SimpleNode jjtn000 = new SimpleNode(JJTAUTOAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id;
  Token op;
  String newTemp;
    try {
      id = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTOADD:
        op = jj_consume_token(AUTOADD);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      //生成四元式，入链表,自增
      //newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo("+", id.image, "1", id.image);
      qtTable.addQTInfo(qt);
        break;
      case AUTOSUBTRACT:
        op = jj_consume_token(AUTOSUBTRACT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      //生成四元式，入链表，自减
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo info = new QTInfo("-", id.image, "1", newTemp);
      QTInfo info1 = new QTInfo("=", newTemp, "_", id.image);
      qtTable.addQTInfo(info);
      qtTable.addQTInfo(info1);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//表达式
  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first = null;
    try {
      first = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return first;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first = null;
  String middle = null;
  String newTemp = null;
  Token op = null;
    try {
      first = MultiplicativeExpression();
    newTemp = first;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case MINUS:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          op = jj_consume_token(ADD);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = MultiplicativeExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first = null, middle = null, newTemp = null;
  Token op = null;
    try {
      first = UnaryExpression();
    newTemp = first;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case QUYU:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          op = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          op = jj_consume_token(DIVIDE);
          break;
        case QUYU:
          op = jj_consume_token(QUYU);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = UnaryExpression();
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtTable.addQTInfo(qt);
      first = newTemp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return newTemp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str = null;
  Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        str = Expression();
        jj_consume_token(RB);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
        break;
      case IDENTIFIER:
        t = Identifier();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case INTEGER_LITERAL:
        t = Integer();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      case FLOAT_NUM:
        t = Float();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Float() throws ParseException {
 /*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(FLOAT_NUM);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public mncTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e000,0x3e000,0x15abe800,0x15abe800,0x15abe800,0x1023e000,0x0,0x800800,0x8000000,0x1000,0x0,0x0,0x0,0x5080000,0x0,0x10000000,0x90000080,0x10000000,0x0,0x0,0x0,0x0,0x0,0x90000080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x40,0x0,0x0,0x20,0x0,0x0,0x0,0x17c000,0x17c000,0x1c00000,0x0,0x20,0x0,0x8,0x0,0x6000000,0xc00,0xc00,0x203000,0x203000,0x8,};
   }

  /** Constructor with InputStream. */
  public mnc(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public mnc(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new mncTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public mnc(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new mncTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public mnc(mncTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(mncTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
